const w32 = @import("std").os.windows;

pub const Enum = c_uint;
pub const Uint = c_uint;
pub const Int = c_int;
pub const Sizei = c_int;
pub const Float = f32;
pub const Double = f64;
pub const Char = u8;
pub const Boolean = u8;
pub const Bitfield = c_uint;
pub const Ubyte = u8;
pub const Sizeiptr = isize;
pub const Intptr = isize;

pub const POINT_SPRITE = 0x8861;
pub const DONT_CARE = 0x1100;
pub const FASTEST = 0x1101;
pub const NICEST = 0x1102;
pub const POINT_SMOOTH_HINT = 0x0C51;
pub const LINE_SMOOTH_HINT = 0x0C52;
pub const POLYGON_SMOOTH_HINT = 0x0C53;
pub const POINT_SMOOTH = 0x0B10;
pub const LINE_SMOOTH = 0x0B20;
pub const LINE_WIDTH = 0x0B21;
pub const POLYGON_SMOOTH = 0x0B41;
pub const COLOR = 0x1800;
pub const COLOR_ATTACHMENT0 = 0x8CE0;
pub const MODELVIEW = 0x1700;
pub const PROJECTION = 0x1701;
pub const TEXTURE = 0x1702;
pub const FRAMEBUFFER_SRGB = 0x8DB9;
pub const MULTISAMPLE = 0x809D;
pub const TEXTURE_2D_MULTISAMPLE = 0x9100;
pub const SRGB8_ALPHA8 = 0x8C43;
pub const TRUE = 1;
pub const FALSE = 0;
pub const DRAW_FRAMEBUFFER = 0x8CA9;
pub const COLOR_BUFFER_BIT = 0x00004000;
pub const NEAREST = 0x2600;
pub const LINEAR = 0x2601;
pub const BLEND = 0x0BE2;
pub const POINTS = 0x0000;
pub const LINES = 0x0001;
pub const LINE_LOOP = 0x0002;
pub const LINE_STRIP = 0x0003;
pub const TRIANGLES = 0x0004;
pub const TRIANGLE_STRIP = 0x0005;
pub const TRIANGLE_FAN = 0x0006;
pub const QUADS = 0x0007;
pub const QUAD_STRIP = 0x0008;
pub const POLYGON = 0x0009;
pub const ZERO = 0;
pub const ONE = 1;
pub const SRC_COLOR = 0x0300;
pub const ONE_MINUS_SRC_COLOR = 0x0301;
pub const SRC_ALPHA = 0x0302;
pub const ONE_MINUS_SRC_ALPHA = 0x0303;
pub const DST_ALPHA = 0x0304;
pub const ONE_MINUS_DST_ALPHA = 0x0305;
pub const DST_COLOR = 0x0306;
pub const ONE_MINUS_DST_COLOR = 0x0307;
pub const FUNC_REVERSE_SUBTRACT = 0x800B;
pub const FUNC_SUBTRACT = 0x800A;
pub const FUNC_ADD = 0x8006;
pub const FRAGMENT_SHADER = 0x8B30;
pub const VERTEX_SHADER = 0x8B31;
pub const TEXTURE_2D = 0x0DE1;
pub const RG = 0x8227;
pub const RG_INTEGER = 0x8228;
pub const R8 = 0x8229;
pub const R16 = 0x822A;
pub const RG8 = 0x822B;
pub const RG16 = 0x822C;
pub const R16F = 0x822D;
pub const R32F = 0x822E;
pub const RG16F = 0x822F;
pub const RG32F = 0x8230;
pub const R8I = 0x8231;
pub const R8UI = 0x8232;
pub const R16I = 0x8233;
pub const R16UI = 0x8234;
pub const R32I = 0x8235;
pub const R32UI = 0x8236;
pub const RG8I = 0x8237;
pub const RG8UI = 0x8238;
pub const RG16I = 0x8239;
pub const RG16UI = 0x823A;
pub const RG32I = 0x823B;
pub const RG32UI = 0x823C;
pub const RGBA32F = 0x8814;
pub const RGB32F = 0x8815;
pub const RGBA16F = 0x881A;
pub const RGB16F = 0x881B;
pub const RGBA32UI = 0x8D70;
pub const RGB32UI = 0x8D71;
pub const RGBA16UI = 0x8D76;
pub const RGB16UI = 0x8D77;
pub const RGBA8UI = 0x8D7C;
pub const RGB8UI = 0x8D7D;
pub const RGBA32I = 0x8D82;
pub const RGB32I = 0x8D83;
pub const RGBA16I = 0x8D88;
pub const RGB16I = 0x8D89;
pub const RGBA8I = 0x8D8E;
pub const RGB8I = 0x8D8F;
pub const RED_INTEGER = 0x8D94;
pub const GREEN_INTEGER = 0x8D95;
pub const BLUE_INTEGER = 0x8D96;
pub const RGB_INTEGER = 0x8D98;
pub const RGBA_INTEGER = 0x8D99;
pub const BGR_INTEGER = 0x8D9A;
pub const BGRA_INTEGER = 0x8D9B;
pub const BYTE = 0x1400;
pub const UNSIGNED_BYTE = 0x1401;
pub const SHORT = 0x1402;
pub const UNSIGNED_SHORT = 0x1403;
pub const INT = 0x1404;
pub const UNSIGNED_INT = 0x1405;
pub const FLOAT = 0x1406;
pub const READ_ONLY = 0x88B8;
pub const WRITE_ONLY = 0x88B9;
pub const READ_WRITE = 0x88BA;
pub const ATOMIC_COUNTER_BUFFER = 0x92C0;
pub const VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
pub const ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
pub const UNIFORM_BARRIER_BIT = 0x00000004;
pub const TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
pub const SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
pub const COMMAND_BARRIER_BIT = 0x00000040;
pub const PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
pub const TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
pub const BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
pub const FRAMEBUFFER_BARRIER_BIT = 0x00000400;
pub const TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
pub const ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
pub const ALL_BARRIER_BITS = 0xFFFFFFFF;
pub const FRAMEBUFFER_BINDING = 0x8CA6;
pub const DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
pub const RENDERBUFFER_BINDING = 0x8CA7;
pub const READ_FRAMEBUFFER = 0x8CA8;
pub const READ_FRAMEBUFFER_BINDING = 0x8CAA;
pub const STENCIL_INDEX = 0x1901;
pub const DEPTH_COMPONENT = 0x1902;
pub const RED = 0x1903;
pub const GREEN = 0x1904;
pub const BLUE = 0x1905;
pub const ALPHA = 0x1906;
pub const RGB = 0x1907;
pub const RGBA = 0x1908;
pub const TEXTURE_RECTANGLE = 0x84F5;
pub const COMPILE = 0x1300;
pub const COMPILE_AND_EXECUTE = 0x1301;

pub var newList: *const fn (Uint, Enum) callconv(w32.WINAPI) void = undefined;
pub var callList: *const fn (Uint) callconv(w32.WINAPI) void = undefined;
pub var endList: *const fn () callconv(w32.WINAPI) void = undefined;
pub var loadIdentity: *const fn () callconv(w32.WINAPI) void = undefined;
pub var vertex2fv: *const fn (*const [2]Float) callconv(w32.WINAPI) void = undefined;
pub var vertex3fv: *const fn (*const [3]Float) callconv(w32.WINAPI) void = undefined;
pub var vertex4fv: *const fn (*const [4]Float) callconv(w32.WINAPI) void = undefined;
pub var color3fv: *const fn (*const [3]Float) callconv(w32.WINAPI) void = undefined;
pub var color4fv: *const fn (*const [4]Float) callconv(w32.WINAPI) void = undefined;
pub var rectf: *const fn (Float, Float, Float, Float) callconv(w32.WINAPI) void = undefined;
pub var matrixMode: *const fn (Enum) callconv(w32.WINAPI) void = undefined;
pub var hint: *const fn (Enum, Enum) callconv(w32.WINAPI) void = undefined;
pub var clearNamedFramebufferfv: *const fn (Uint, Enum, Int, [*]const Float) callconv(w32.WINAPI) void = undefined;
pub var matrixLoadIdentityEXT: *const fn (Enum) callconv(w32.WINAPI) void = undefined;
pub var matrixOrthoEXT: *const fn (Enum, Double, Double, Double, Double, Double, Double) callconv(w32.WINAPI) void = undefined;
pub var enable: *const fn (Enum) callconv(w32.WINAPI) void = undefined;
pub var disable: *const fn (Enum) callconv(w32.WINAPI) void = undefined;
pub var textureStorage2DMultisample: *const fn (Uint, Sizei, Enum, Sizei, Sizei, Boolean) callconv(w32.WINAPI) void = undefined;
pub var textureStorage2D: *const fn (Uint, Sizei, Enum, Sizei, Sizei) callconv(w32.WINAPI) void = undefined;
pub var createTextures: *const fn (Enum, Sizei, [*]Uint) callconv(w32.WINAPI) void = undefined;
pub var deleteTextures: *const fn (Sizei, [*]const Uint) callconv(w32.WINAPI) void = undefined;
pub var createFramebuffers: *const fn (Sizei, [*]Uint) callconv(w32.WINAPI) void = undefined;
pub var deleteFramebuffers: *const fn (Sizei, [*]const Uint) callconv(w32.WINAPI) void = undefined;
pub var namedFramebufferTexture: *const fn (Uint, Enum, Uint, Int) callconv(w32.WINAPI) void = undefined;
pub var blitNamedFramebuffer: *const fn (Uint, Uint, Int, Int, Int, Int, Int, Int, Int, Int, Bitfield, Enum) callconv(w32.WINAPI) void = undefined;
pub var bindFramebuffer: *const fn (Enum, Uint) callconv(w32.WINAPI) void = undefined;
pub var begin: *const fn (Enum) callconv(w32.WINAPI) void = undefined;
pub var end: *const fn () callconv(w32.WINAPI) void = undefined;
pub var getError: *const fn () callconv(w32.WINAPI) Enum = undefined;
pub var pointSize: *const fn (Float) callconv(w32.WINAPI) void = undefined;
pub var lineWidth: *const fn (Float) callconv(w32.WINAPI) void = undefined;
pub var blendFunc: *const fn (Enum, Enum) callconv(w32.WINAPI) void = undefined;
pub var blendEquation: *const fn (Enum) callconv(w32.WINAPI) void = undefined;
pub var vertex2f: *const fn (Float, Float) callconv(w32.WINAPI) void = undefined;
pub var vertex2d: *const fn (Double, Double) callconv(w32.WINAPI) void = undefined;
pub var vertex2i: *const fn (Int, Int) callconv(w32.WINAPI) void = undefined;
pub var color3f: *const fn (Float, Float, Float) callconv(w32.WINAPI) void = undefined;
pub var color4f: *const fn (Float, Float, Float, Float) callconv(w32.WINAPI) void = undefined;
pub var color4ub: *const fn (Ubyte, Ubyte, Ubyte, Ubyte) callconv(w32.WINAPI) void = undefined;
pub var pushMatrix: *const fn () callconv(w32.WINAPI) void = undefined;
pub var popMatrix: *const fn () callconv(w32.WINAPI) void = undefined;
pub var rotatef: *const fn (Float, Float, Float, Float) callconv(w32.WINAPI) void = undefined;
pub var scalef: *const fn (Float, Float, Float) callconv(w32.WINAPI) void = undefined;
pub var translatef: *const fn (Float, Float, Float) callconv(w32.WINAPI) void = undefined;
pub var createShaderProgramv: *const fn (Enum, Sizei, [*]const [*:0]const Char) callconv(w32.WINAPI) Uint = undefined;
pub var useProgram: *const fn (Uint) callconv(w32.WINAPI) void = undefined;
pub var bindBuffer: *const fn (Enum, Uint) callconv(w32.WINAPI) void = undefined;
pub var bindBufferRange: *const fn (Enum, Uint, Uint, Intptr, Sizeiptr) callconv(w32.WINAPI) void = undefined;
pub var bindBufferBase: *const fn (Enum, Uint, Uint) callconv(w32.WINAPI) void = undefined;
pub var createBuffers: *const fn (Sizei, [*]Uint) callconv(w32.WINAPI) void = undefined;
pub var deleteBuffers: *const fn (Sizei, [*]const Uint) callconv(w32.WINAPI) void = undefined;
pub var namedBufferStorage: *const fn (Uint, Sizeiptr, ?*const anyopaque, Bitfield) callconv(w32.WINAPI) void = undefined;
pub var clearTexImage: *const fn (Uint, Int, Enum, Enum, ?*const anyopaque) callconv(w32.WINAPI) void = undefined;
pub var bindImageTexture: *const fn (Uint, Uint, Int, Boolean, Int, Enum, Enum) callconv(w32.WINAPI) void = undefined;
pub var deleteProgram: *const fn (Uint) callconv(w32.WINAPI) void = undefined;
pub var memoryBarrier: *const fn (Bitfield) callconv(w32.WINAPI) void = undefined;
pub var colorMask: *const fn (Boolean, Boolean, Boolean, Boolean) void = undefined;
pub var getIntegerv: *const fn (Enum, [*]Int) void = undefined;
pub var bindTextureUnit: *const fn (Uint, Uint) callconv(w32.WINAPI) void = undefined;
